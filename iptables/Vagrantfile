# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
  :inet1Router => {
        :box_name => "centos/7",
        :net => [
                   {ip: '192.168.255.11', adapter: 2, netmask: "255.255.255.240", virtualbox__intnet: "inet-net"},
                ]
  },
  :inet2Router => {
        :box_name => "centos/7",
        :net => [
                   {ip: '192.168.255.12', adapter: 2, netmask: "255.255.255.240", virtualbox__intnet: "inet-net"},
                ]
  },
  :centralRouter => {
        :box_name => "centos/7",
        :net => [
                   {ip: '192.168.255.1', adapter: 2, netmask: "255.255.255.252", virtualbox__intnet: "inet-net"},
                   {ip: '192.168.0.1', adapter: 3, netmask: "255.255.255.0", virtualbox__intnet: "local-net"},
                ]
  },
  
  :centralServer => {
        :box_name => "centos/7",
        :net => [
                   {ip: '192.168.0.2', adapter: 2, netmask: "255.255.255.0", virtualbox__intnet: "local-net"},
                ]
  }
}

Vagrant.configure("2") do |config|

    MACHINES.each do |boxname, boxconfig|
  
      config.vm.define boxname do |box|
  
          box.vm.box = boxconfig[:box_name]
          box.vm.host_name = boxname.to_s
  
          boxconfig[:net].each do |ipconf|
            box.vm.network "private_network", ipconf
          end
          
          if boxconfig.key?(:public)
            box.vm.network "public_network", boxconfig[:public]
          end
  
          box.vm.provision "shell", inline: <<-SHELL
            mkdir -p ~root/.ssh
                  cp ~vagrant/.ssh/auth* ~root/.ssh
          SHELL
          
          case boxname.to_s
          when "inet1Router"
            box.vm.provision "ansible", run: "always", type: "ansible_local"  do |ansible|
              ansible.become = true
                          ansible.playbook = "inet1Router.yml"
            end
          when "inet2Router"
            box.vm.network "forwarded_port", guest: 8080, host: 8888, host_ip: "127.0.0.1", id: "nginx"
            box.vm.provision "ansible", run: "always", type: "ansible_local"  do |ansible|
              ansible.become = true
                          ansible.playbook = "inet2Router.yml"
            end
          when "centralRouter"
            box.vm.provision "ansible", run: "always", type: "ansible_local"  do |ansible|
              ansible.become = true
                          ansible.playbook = "centralRouter.yml"
            end
            #box.vm.provision "shell", run: "always", inline: <<-SHELL
              # Установка софта; Форвардинг для прохождения транзитного траффика; Установка шлюза на eth1 и удаление на eth0
              #sudo yum install -y epel-release; sudo yum install -y nmap
              #sudo bash -c 'echo "net.ipv4.conf.all.forwarding=1" >> /etc/sysctl.conf'; sudo sysctl -p
              #echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0 
              #echo "GATEWAY=192.168.255.11" >> /etc/sysconfig/network-scripts/ifcfg-eth1
              #sudo reboot
              #SHELL
          when "centralServer"
            box.vm.provision "ansible", run: "always", type: "ansible_local"  do |ansible|
              ansible.become = true
                          ansible.playbook = "centralServer.yml"
            end
            # box.vm.provision "shell", run: "always", inline: <<-SHELL
              # Установка софта, сетевые настройки шлюза
              # sudo yum install -y epel-release; sudo yum install -y nginx; sudo systemctl enable nginx; sudo systemctl start nginx
              # echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0 
              # echo "GATEWAY=192.168.0.1" >> /etc/sysconfig/network-scripts/ifcfg-eth1
              # sudo reboot
              # SHELL
          end
        end
      end
    end
